---
name: GitHub Issue Monitors

"on":
  schedule:
    # Run daily at 6:00 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      config_filter:
        description: 'Filter configs by name pattern (optional)'
        required: false
        default: ''

jobs:
  discover-configs:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Discover config files
        id: set-matrix
        run: |
          # Find all JSON config files (excluding template/example files)
          configs=$(find configs/ -name "*.json" -not -name "*template*" \
            -not -name "*example*" | jq -R -s -c 'split("\n")[:-1]')

          # Filter configs by input pattern if provided
          if [ -n "${{ github.event.inputs.config_filter }}" ]; then
            configs=$(echo "$configs" | jq --arg filter \
              "${{ github.event.inputs.config_filter }}" \
              'map(select(test($filter)))')
          fi

          echo "matrix={\"config\":$configs}" >> $GITHUB_OUTPUT
          echo "Found configs: $configs"

  monitor:
    needs: discover-configs
    if: ${{ needs.discover-configs.outputs.matrix != '{"config":[]}' }}
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    strategy:
      matrix: ${{ fromJson(needs.discover-configs.outputs.matrix) }}
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Extract monitor info
        id: monitor-info
        run: |
          # Extract monitor name and metadata from config file
          monitor_name=$(jq -r '.name // "unnamed-monitor"' \
            "${{ matrix.config }}")
          monitor_desc=$(jq -r '.description // ""' "${{ matrix.config }}")

          # Create safe artifact name from config file path
          config_basename=$(basename "${{ matrix.config }}")
          config_basename=$(basename "$config_basename" .json.example)
          config_basename=$(basename "$config_basename" .json)
          safe_artifact_name=$(echo "$config_basename" | \
            sed 's/[^a-zA-Z0-9._-]/-/g')

          echo "monitor_name=$monitor_name" >> $GITHUB_OUTPUT
          echo "monitor_desc=$monitor_desc" >> $GITHUB_OUTPUT
          echo "config_file=${{ matrix.config }}" >> $GITHUB_OUTPUT
          echo "artifact_name=$safe_artifact_name" >> $GITHUB_OUTPUT

          echo "Processing monitor: $monitor_name"
          if [ -n "$monitor_desc" ]; then
            echo "Description: $monitor_desc"
          fi
          echo "Safe artifact name: $safe_artifact_name"

      - name: Download previous findings
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: monitor-results-${{ steps.monitor-info.outputs.artifact_name }}
          path: ./previous-run

      - name: Run Issue Monitor
        id: monitor
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          CONFIG_FILE: ${{ matrix.config }}
        run: |
          python src/monitor_github_notify.py
          if [ -f new_issues.json ]; then
            echo "has_new_issues=true" >> $GITHUB_OUTPUT
            echo "issue_count=$(jq length new_issues.json)" >> \
              $GITHUB_OUTPUT
          else
            echo "has_new_issues=false" >> $GITHUB_OUTPUT
            echo "issue_count=0" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Issue for New Findings
        if: steps.monitor.outputs.has_new_issues == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Load new issues found by the monitor
            const newIssues = JSON.parse(
              fs.readFileSync('new_issues.json', 'utf8'));

            // Load previously processed issues (if any)
            let processedIssues = [];
            const previousFile = './previous-run/processed_issues.json';
            if (fs.existsSync(previousFile)) {
              try {
                processedIssues = JSON.parse(
                  fs.readFileSync(previousFile, 'utf8'));
                console.log(
                  `Loaded ${processedIssues.length} previously ` +
                  `processed issues`);
              } catch (error) {
                console.log(
                  'Could not load previous processed issues:', error.message);
              }
            } else {
              console.log(
                'No previous processed issues found - ' +
                'first run for this monitor');
            }

            // Create Set of previously processed issue URLs for fast lookup
            const processedUrls = new Set(
              processedIssues.map(issue => issue.html_url));

            // Filter out issues that were already processed
            const trulyNewIssues = newIssues.filter(issue => {
              if (processedUrls.has(issue.html_url)) {
                console.log(
                  `Skipping duplicate issue: ${issue.title} ` +
                  `(${issue.html_url})`);
                return false;
              }
              return true;
            });

            console.log(
              `Found ${newIssues.length} total issues, ` +
              `${trulyNewIssues.length} are new`);

            if (trulyNewIssues.length === 0) {
              console.log(
                'No new issues to process - ' +
                'all were already handled in previous runs');
              return;
            }

            const today = new Date().toISOString().split('T')[0];
            const configFile = '${{ matrix.config }}';
            const configData = JSON.parse(fs.readFileSync(configFile, 'utf8'));
            const monitorName = configData.name || 'unnamed-monitor';

            let body = `Found ${trulyNewIssues.length} new GitHub issue${
              trulyNewIssues.length > 1 ? 's' : ''} matching keywords:\n\n`;

            body += `**Monitor:** \`${monitorName}\`\n`;
            body += `**Config:** \`${configFile}\`\n\n---\n\n`;

            for (const issue of trulyNewIssues) {
              body += `## 📋 ${issue.title}\n\n`;
              body += `- **Repository:** \`${issue.repository}\`\n`;
              body += `- **Author:** \`${issue.user}\`\n`;
              body += `- **Created:** ${
                new Date(issue.created_at).toLocaleString()}\n`;
              body += `- **Issue ID:** \`#${
                issue.html_url.split('/').pop()}\`\n\n`;

              if (issue.body && issue.body.length > 0) {
                const preview = issue.body.substring(0, 200);
                body += `**Preview:**\n> ${preview}${
                  issue.body.length > 200 ? '...' : ''}\n\n`;
              }

              body += `---\n\n`;
            }

            body += `\n*This issue was automatically created by the ` +
              `GitHub issue monitor (\`${monitorName}\`) on ${today}*`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🔍 [${monitorName}] ${trulyNewIssues.length} new issue${
                trulyNewIssues.length > 1 ? 's' : ''} found - ${today}`,
              body: body,
              labels: [
                'github-monitor',
                'notification',
                'auto-created',
                `monitor-${String(monitorName).toLowerCase()
                  .replace(/[^a-z0-9]/g, '-')}`
              ]
            });

            console.log(`✅ Created GitHub issue for ${
              trulyNewIssues.length} new findings from ${monitorName}`);

            // Update the processed issues list for next run
            const allProcessedIssues = [...processedIssues, ...trulyNewIssues];

            // Add processing metadata
            const processedWithMetadata = allProcessedIssues.map(issue => ({
              ...issue,
              processed_at: issue.processed_at || new Date().toISOString(),
              processed_by: `${monitorName} monitor`
            }));

            // Save updated processed issues for next run
            fs.writeFileSync('processed_issues.json',
              JSON.stringify(processedWithMetadata, null, 2));

            console.log(
              `📝 Saved ${allProcessedIssues.length} total processed ` +
              `issues for future duplicate prevention`);

      - name: Save processed issues tracking
        if: always()
        run: |
          # Ensure processed_issues.json exists even if no new issues
          # were created
          if [ ! -f processed_issues.json ]; then
            if [ -f ./previous-run/processed_issues.json ]; then
              echo "📝 No new issues - copying previous processed issues file"
              cp ./previous-run/processed_issues.json processed_issues.json
            else
              echo "📝 No previous or new issues - " \
                "creating empty processed issues file"
              echo "[]" > processed_issues.json
            fi
          fi

      - name: Upload results as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: monitor-results-${{ steps.monitor-info.outputs.artifact_name }}
          path: processed_issues.json
          retention-days: 30
          if-no-files-found: ignore
